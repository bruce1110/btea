线程同步：互斥量，读写锁，条件变量，自旋锁
屏障：是用户协调多个线程并行工作的同步机制.直到所有的线程都调用pthread_barrier_wait后才全部唤醒
线程属性结构：对应用程序来说是不透明的，可以对线程属性结构进行清理的唯一接口是pthread_attr_destroy
线程属性：detachstate(线程的分离状态属性),guardsize(线程栈末尾的警戒缓冲区大小字节数),stackaddr(线程栈的最低地址),stacksize(线程栈的最小长度字节数);

可重入函数：
重入即表示重复进入，首先它意味着这个函数可以被中断，其次意味着它除了使用自己栈上的变量以外不依赖于任何环境（包括static ），这样的函数就是purecode （纯代码）可重入，
可以允许有该函数的多个副本在运行，由于它们使用的是分离的栈，所以不会互相干扰。

信号安全，其实也就是异步信号安全，是说线程在信号处理函数当中，不管以任何方式调用你的这个函数如果不死锁不修改数据，那就是信号安全的。因此，我认为可重入与异步信号安全是一个概念 

线程安全：一个函数被称为线程安全的，当且仅当被多个并发线程反复的调用时，它会一直产生正确的结果。 可重入函数是线程安全函数的一个真子集。

如果一个函数对多个线程来说是可重入的，则说这个函数是线程安全的，但这并不能说明对信号处理程序来说该函数也是可重入的。
如果函数对异步信号处理程序的重入是安全的，那么就可以说函数是" 异步- 信号安全 " 的。

异步信号安全：可重入+阻塞任何引起不一致的信号发送
不可重入的特点：a：使用静态数据，b：调用malloc或者free，c：标准io函数

n >& m 表示将n重定向到m
&> file 表示重定向标准输出和标准错误输出到file

一般的调试步骤：
ulimit -c 1024 //默认的core大小为0
./a.out //产生core文件
gdb a.out core.103434 //进入gdb，bt查看调用栈

文件io：不带缓冲的IO，不是ISO C的组成部分，内核中仍然使用高速缓冲区。向文件写入数据时，内核先将数据复制到缓冲区，然后排入队列，晚些时候再写入磁盘，这种方式称为延迟写。
预定义文件描述符：STDIN_FILENO,STDOUT_FILENO,STDERR_FILENO

标准IO：ISO C定义。三种类型：全缓冲，行缓冲，不缓冲
预定义文件指针：stdin,stdout,stderr

FD_CLOEXEC：close on exec, not on-fork, 意为如果对描述符设置了FD_CLOEXEC，使用execl执行的程序里，此描述符被关闭，不能再使用它，
但是在使用fork调用的子进程中，此描述符并不关闭，仍可使用。

孤儿进程：父进程先退出
僵死进程：子进程退出时父进程还没有调用wait或者waitpid
进程组：一个或者多个进程的集合；一个进程只能对它自己或者其子进程设置进程组，并且子进程调用exec函数后，就不能更改该子进程的进程组id
会话：一个或者多个进程组的集合
孤儿进程组：该组中每个成员的父进程要么是该组的一个成员，要么不是该组所属会话的成员；也可表述为：该组中有一个进程，其父进程在属于会话的另一个组中则不是孤儿进程组

信号：软件中断。提供了一种处理异步事件的方法。SIGKILL和SIGSTOP不能忽略

工厂模式：简单工厂模式，工厂方法模式，抽象工厂模式

简单工厂：工厂类+抽象产品+具体产品
工厂方法：抽象工厂+具体工厂+抽象产品+具体产品
抽象工厂：抽象工厂+具体工厂+抽象产品+具体产品
		  使用条件：系统中有多个产品族+系统一次只能消费其中的一族产品
	      产品树：产品的具体品牌层次结构，比如汽车有宝马和奔驰。此时抽象产品可以是奔驰车或者宝马车；
	      产品族：产品的一个抽象分类，比如跑车一族或者商务车一族。此时的具体产品可以是奔驰商务车，奔驰跑车，而具体的工厂可以按照商务或者跑车划分，分别实现抽象工厂中的对应品牌

非阻塞IO：使open，read，write这样的I/O操作，不会永远阻塞，如果这种操作不会完成，则调用立即出错返回。
记录锁：建议性锁和强制性锁；文件锁是强制性的而非建议性的。
